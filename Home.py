# A. IMPORTS:
import streamlit as st
import pandas as pd
import numpy as np
import requests
import pickle
from streamlit_extras.switch_page_button import switch_page
import os
import streamlit.components.v1 as components
from streamlit_extras.stoggle import stoggle
from streamlit_extras.let_it_rain import rain
import random
import cohere

# B. FUNCTION DEFS:
# 1. Fetching posters from themoviedb website using API for generated movie name:
def fetch_poster(movie_id):
    url = "https://api.themoviedb.org/3/movie/{}?api_key=8265bd1679663a7ea12ac168da84d2e8&language=en-US".format(movie_id)
    data = requests.get(url)
    data = data.json()
    print(data)
    poster_path = data['poster_path']
    full_path = "https://image.tmdb.org/t/p/w500/" + poster_path
    return full_path

# 2. Using multiple APIs for generating movie list [8-12 movies] in specified format. Cohere API limit - 5 calls/minute.
def multi_api_for_movielist(selected_movie):
    try:
        co = cohere.Client('EsdQOdS28qWvObz8pE1DFYbEfXMqOsjME20KgJ6i') # This is your trial API key
        response = co.generate(
        model='command',
        prompt='You are a movie recommender, the user can type anything!\nYour response must not include any extra words other than\na list containing 8-12 movies only! Generated by you based on the following information. \n\nThe output should be of the form:\n\nList = [\"movie1\", \"movie2\", \"movie 3\"... So on, \"movie11\", \"movie12\"]\n\nPlease return the list of movie titles as a string, properly formatted with double quotes around each title. \nEnsure that any apostrophes within the titles are properly escaped with a backslash (\).\n\nUser: '+selected_movie,
        max_tokens=300,
        temperature=0.9,
        k=0,
        stop_sequences=[],
        return_likelihoods='NONE')
        print('Semantic search result: {}'.format(response.generations[0].text))
        mov_str1 = f'{response.generations[0].text}'
        return mov_str1
    except:
        co = cohere.Client('QV5Gd5mELJPltvQm4kN8EH4ORFycFlun14ulhhSf') # This is your trial API key
        response = co.generate(
        model='command',
        prompt='You are a movie recommender, the user can type anything!\nYour response must not include any extra words other than\na list containing 8-12 movies only! Generated by you based on the following information. \n\nThe output should be of the form:\n\nList = [\"movie1\", \"movie2\", \"movie 3\"... So on, \"movie11\", \"movie12\"]\n\nPlease return the list of movie titles as a string, properly formatted with double quotes around each title. \nEnsure that any apostrophes within the titles are properly escaped with a backslash (\).\n\nUser: '+selected_movie,
        max_tokens=300,
        temperature=0.9,
        k=0,
        stop_sequences=[],
        return_likelihoods='NONE')
        print('Semantic search result: {}'.format(response.generations[0].text))
        mov_str1 = f'{response.generations[0].text}'
        return mov_str1

# 3. Using multiple APIs for generating movie descriptions for results. Cohere API limit - 5 calls/minute.
def multi_api_for_movie_description():
    try:
        co = cohere.Client('EsdQOdS28qWvObz8pE1DFYbEfXMqOsjME20KgJ6i') # This is your trial API key
        response = co.generate(
            model='command',
            prompt='Give a very short and interesting read of 3 lines only about this movie also make this description strictly personalized for the users demographics given below after the movie name:\nName of the movie: '+names[i]+'; User demographics: '+str(prompt_1),
            max_tokens=300,
            temperature=0.9,
            k=0,
            stop_sequences=[],
            return_likelihoods='NONE')
        return f'{response.generations[0].text}'
        # print('Prediction: {}'.format(response.generations[0].text))
        # stoggle("See More/Less",
        #     f'{response.generations[0].text}'
        # )
    except:
        co = cohere.Client('QV5Gd5mELJPltvQm4kN8EH4ORFycFlun14ulhhSf') # This is your trial API key
        response = co.generate(
            model='command',
            prompt='Give a very short and interesting read of 3 lines only about this movie also make this description strictly personalized for the users demographics given below after the movie name:\nName of the movie: '+names[i]+'; User demographics: '+str(prompt_1),
            max_tokens=300,
            temperature=0.9,
            k=0,
            stop_sequences=[],
            return_likelihoods='NONE')
        return f'{response.generations[0].text}'
        # print('Prediction: {}'.format(response.generations[0].text))
        # stoggle("See More/Less",
        #     f'{response.generations[0].text}'
        # )

# 4. Movie Descriptions.
def why_this():
    co = cohere.Client('EsdQOdS28qWvObz8pE1DFYbEfXMqOsjME20KgJ6i') # This is your trial API key
    response = co.generate(
    model='command',
    prompt='Now, consider you have suggested some movies to this person, whose demographics are given below. Describe strictly in only three lines as to why you have recommended the movies to the user. Keep the read interesting to the user with emojies and lingo targeting their demographics! Strictly do not include movie names in the paragraph. Example: (If you are recommending movies to a 24yr old, male, engineer)\nHi! These are the recommended films for young engineers like you! They showcase the power of innovation, problem-solving, \nand the pursuit of knowledge, inspiring you to think outside the box and push your boundaries. \nThese movies will entertain and motivate you to aspire for greatness in your engineering journey!\n\nUser Demographics: '+str(prompt_1),
    max_tokens=100,
    temperature=0.9,
    k=0,
    stop_sequences=[],
    return_likelihoods='NONE')
    print('Prediction: {}'.format(response.generations[0].text))
    return response.generations[0].text

# 5. Fetching names and posters.
def movie_lookup():
    with open(r"C:\Users\vishwebh\Desktop\Teleco\multipage_app\Pages\temp_file.txt", 'r') as mov_file:
        movie_names = mov_file.readlines()
    movie_names = [name.strip() for name in movie_names]
    recommend_movie_posters = []
    valid_movie_names = []
    for my_movie in movie_names:
        print(my_movie)
        movie_df = df[df.title == my_movie]
        if not movie_df.empty:
            movie_index = movie_df.index.values[0]
            movie_id = df.loc[movie_index, 'id']
            recommend_movie_posters.append(fetch_poster(movie_id))
            valid_movie_names.append(my_movie)
    with open(r"C:\Users\vishwebh\Desktop\Teleco\multipage_app\Pages\temp_file.txt", "w") as emp_file:
        emp_file.write("")
    return valid_movie_names, recommend_movie_posters

# That's all we are done with all the essential functions we will be using below!               

# C. SETTING PAGE CONFIGURATION AND STYLING:
st.set_page_config(
    page_title = "TeleGenAIsis",
    page_icon = "ü§ñ",
)
st.markdown(
         f"""
         <style>
         .stApp {{
             background-image: url("https://images.pexels.com/photos/924824/pexels-photo-924824.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2");
             background-attachment: fixed;
             background-size: cover
         }}
         </style>
         """,
         unsafe_allow_html=True
     )

st.markdown("<h1 style='text-align: center;'>TeleGenAIsisü§ñ</h1>", unsafe_allow_html=True)
st.markdown("<h2 style='text-align: center;'>Future of entertainment!!üé•</h2>", unsafe_allow_html=True)
st.sidebar.success("Select a page above.")
emoji_lst = ["üéà", "ü•≥", "üéâ","üçø", "üé•", "üé¨", "üì∫", "üç©", "ü•§", "üç´", "üéûÔ∏è", "üéß", "üçï", "üéÆ", "üéôÔ∏è", "üî•", "üéâ", "üéä"]
random_emo = random.choice(emoji_lst)
rain(
    emoji=random_emo,
    font_size=40,  # the size of emoji
    falling_speed=3,  # speed of raining
    animation_length=1,  # for how much time the animation will happen
)

# D. LOADING AND READING MOVIE DATA: (We fetch movie posters with their movie_id - tmdb dataset.)
df=pickle.load(open('movie_list.pkl','rb'))
similarity_score=pickle.load(open('similarity.pkl','rb'))

# E. OPEN AND READ USER DEMOGRAPHICS FROM TEXT FILE CREATED DURING SIGNUP: 
with open(r'C:\Users\vishwebh\Desktop\Teleco\multipage_app\Pages\username.txt', 'r') as file:
    prompt_1 = file.readlines()

# F. SEMANTIC SEARCH:
selected_movie = st.text_input('Enter anything!')
if selected_movie:
    mov_str1 = multi_api_for_movielist(selected_movie)
    print(mov_str1)
    if  mov_str1.startswith("\nList = ["):
        strt_idx = mov_str1.index('[')
        end_idx = mov_str1.index(']')
        list_ = mov_str1[strt_idx:end_idx+1]
        mov_list = eval(list_)

        with open("pages/temp_file.txt", "w") as file:
            for movie in mov_list:
                file.write(movie + "\n")
        
        names,poster = movie_lookup()
        col1, col2, col3, col4 = st.columns(4)
        for i in range(1,len(names)):
            try:
                if ( i % 4 == 1) and i < len(names):
                    with col1:
                        st.text(names[i])
                        st.image(poster[i])
                        stoggle("See More/Less",
                            multi_api_for_movie_description()
                        )
                elif (i % 4 == 2):
                    with col2:
                        st.text(names[i])
                        st.image(poster[i])
                        stoggle("See More/Less",
                            multi_api_for_movie_description()
                        )
                elif (i % 4 == 3):
                    with col3:
                        st.text(names[i])
                        st.image(poster[i])
                        stoggle("See More/Less",
                            multi_api_for_movie_description()
                        )
                elif (i % 4 == 0):
                    with col4:
                        st.text(names[i])
                        st.image(poster[i])
                        stoggle("See More/Less",
                            multi_api_for_movie_description()
                        )

            except IndexError:
                break

# G. INITIAL ON-SCREEN HOME PAGE PERSONALIZATION:
else:
    text = """
    You are a Movie recommender. You need to recommend movies based on the following demographics information of user
    given below.
    Strictly follow the instructions provided after the user demographics information below.

    User demographics:
    """
    
    text_1 = """
    Important instructions to follow (Strictly follow these instruction):

    Your response must not include any extra words other than a list strictly containing only 8 - 12 movie names only! Strictly starting with 'List = [' as given in the example output below! 
    Generated by you based on the above information. The output should be of the form:

    List = ["movie1", "movie2", "movie 3"... So on, "movie11", "movie12"]

    Please return the list of movie titles as a string, properly formatted with double quotes around each title. 
    Ensure that any apostrophes within the titles are properly escaped with a backslash (\).
    """

    # Home page description - Why am I recommending these to you?
    descr = why_this()
    st.markdown(f'<b><i>{descr}</i></b>', unsafe_allow_html=True)

    # Movie List
    co = cohere.Client('EsdQOdS28qWvObz8pE1DFYbEfXMqOsjME20KgJ6i') # This is your trial API key
    response = co.generate(
    model='command',
    prompt=text_1+'\n'+text+'(Age, Occupation, Gender, Favourite genre)'+'\n'+str(prompt_1),
    max_tokens=300,
    temperature=0.9,
    k=0,
    stop_sequences=[],
    return_likelihoods='NONE')
    mov_str = f'{response.generations[0].text}'
    print(mov_str)
    if  mov_str.startswith("\nList = ["):
        strt_idx = mov_str.index('[')
        end_idx = mov_str.index(']')
        list_ = mov_str[strt_idx:end_idx+1]
        mov_list = eval(list_)
        with open("pages/temp_file.txt", "w") as file:
            for movie in mov_list:
                file.write(movie + "\n")

        names,poster = movie_lookup()
        col1, col2, col3, col4 = st.columns(4)
        for i in range(1,len(names)):
            try:
                if ( i % 4 == 1) and i < len(names):
                    with col1:
                        st.text(names[i])
                        st.image(poster[i])
                        stoggle("See More/Less",
                            multi_api_for_movie_description()
                        )
                elif (i % 4 == 2):
                    with col2:
                        st.text(names[i])
                        st.image(poster[i])
                        stoggle("See More/Less",
                            multi_api_for_movie_description()
                        )
                elif (i % 4 == 3):
                    with col3:
                        st.text(names[i])
                        st.image(poster[i])
                        stoggle("See More/Less",
                            multi_api_for_movie_description()
                        )
                elif (i % 4 == 0):
                    with col4:
                        st.text(names[i])
                        st.image(poster[i])
                        stoggle("See More/Less",
                            multi_api_for_movie_description()
                        )

            except IndexError:
                break
    else:
        st.write("The AI model did not generate text stating with 'List = '")

    
